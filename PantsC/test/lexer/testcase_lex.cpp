#include "Lexer.hpp"
#include "Tokens.hpp"
#include "catch.hpp"
#include <fstream>
using namespace pants;

TEST_CASE("lex.pant", "lex.pant") {
	std::ifstream file {"/home/simon/PantsSys/PantsC/test/lexer/cases/lex.pant"};
	Lexer lexer{file};
	REQUIRE(lexer.Lex().ToString() == "add");
	REQUIRE(lexer.Lex().ToString() == "min");
	REQUIRE(lexer.Lex().ToString() == "arrow");
	REQUIRE(lexer.Lex().ToString() == "div");
	REQUIRE(lexer.Lex().ToString() == "mul");
	REQUIRE(lexer.Lex().ToString() == "comma");
	REQUIRE(lexer.Lex().ToString() == "colon");
	REQUIRE(lexer.Lex().ToString() == "semi");
	REQUIRE(lexer.Lex().ToString() == "dot");
	REQUIRE(lexer.Lex().ToString() == "lparen");
	REQUIRE(lexer.Lex().ToString() == "rparen");
	REQUIRE(lexer.Lex().ToString() == "lsquare");
	REQUIRE(lexer.Lex().ToString() == "rsquare");
	REQUIRE(lexer.Lex().ToString() == "and");
	REQUIRE(lexer.Lex().ToString() == "or");
	REQUIRE(lexer.Lex().ToString() == "not");
	REQUIRE(lexer.Lex().ToString() == "import");
	REQUIRE(lexer.Lex().ToString() == "in");
	REQUIRE(lexer.Lex().ToString() == "is");
	REQUIRE(lexer.Lex().ToString() == "if");
	REQUIRE(lexer.Lex().ToString() == "func");
	REQUIRE(lexer.Lex().ToString() == "for");
	REQUIRE(lexer.Lex().ToString() == "while");
	REQUIRE(lexer.Lex().ToString() == "false");
	REQUIRE(lexer.Lex().ToString() == "enum");
	REQUIRE(lexer.Lex().ToString() == "else");
	REQUIRE(lexer.Lex().ToString() == "end");
	REQUIRE(lexer.Lex().ToString() == "return");
	REQUIRE(lexer.Lex().ToString() == "class");
	REQUIRE(lexer.Lex().ToString() == "template");
	REQUIRE(lexer.Lex().ToString() == "true");
	REQUIRE(lexer.Lex().ToString() == "do");
	REQUIRE(lexer.Lex().ToString() == "gt");
	REQUIRE(lexer.Lex().ToString() == "lt");
	REQUIRE(lexer.Lex().ToString() == "le");
	REQUIRE(lexer.Lex().ToString() == "ge");
	REQUIRE(lexer.Lex().ToString() == "assign");
	REQUIRE(lexer.Lex().ToString() == "eq");
	REQUIRE(lexer.Lex().ToString() == "id(a)");
	REQUIRE(lexer.Lex().ToString() == "id(b)");
	REQUIRE(lexer.Lex().ToString() == "id(c)");
	REQUIRE(lexer.Lex().ToString() == "id(d)");
	REQUIRE(lexer.Lex().ToString() == "id(e)");
	REQUIRE(lexer.Lex().ToString() == "id(f)");
	REQUIRE(lexer.Lex().ToString() == "id(g)");
	REQUIRE(lexer.Lex().ToString() == "id(h)");
	REQUIRE(lexer.Lex().ToString() == "id(i)");
	REQUIRE(lexer.Lex().ToString() == "id(j)");
	REQUIRE(lexer.Lex().ToString() == "id(k)");
	REQUIRE(lexer.Lex().ToString() == "id(l)");
	REQUIRE(lexer.Lex().ToString() == "id(m)");
	REQUIRE(lexer.Lex().ToString() == "id(c)");
	REQUIRE(lexer.Lex().ToString() == "id(o)");
	REQUIRE(lexer.Lex().ToString() == "id(p)");
	REQUIRE(lexer.Lex().ToString() == "id(q)");
	REQUIRE(lexer.Lex().ToString() == "id(r)");
	REQUIRE(lexer.Lex().ToString() == "id(s)");
	REQUIRE(lexer.Lex().ToString() == "id(t)");
	REQUIRE(lexer.Lex().ToString() == "id(u)");
	REQUIRE(lexer.Lex().ToString() == "id(v)");
	REQUIRE(lexer.Lex().ToString() == "id(w)");
	REQUIRE(lexer.Lex().ToString() == "id(x)");
	REQUIRE(lexer.Lex().ToString() == "id(y)");
	REQUIRE(lexer.Lex().ToString() == "id(z)");
	REQUIRE(lexer.Lex().ToString() == "id(And)");
	REQUIRE(lexer.Lex().ToString() == "id(anda)");
	REQUIRE(lexer.Lex().ToString() == "id(cand)");
	REQUIRE(lexer.Lex().ToString() == "id(platinum)");
	REQUIRE(lexer.Lex().ToString() == "int(123)");
	REQUIRE(lexer.Lex().ToString() == "int(22552)");
	REQUIRE(lexer.Lex().ToString() == "int(123)");
	REQUIRE(lexer.Lex().ToString() == "int(291)");
	REQUIRE(lexer.Lex().ToString() == "char");
	REQUIRE(lexer.Lex().ToString() == "u8");
	REQUIRE(lexer.Lex().ToString() == "u16");
	REQUIRE(lexer.Lex().ToString() == "u32");
	REQUIRE(lexer.Lex().ToString() == "i8");
	REQUIRE(lexer.Lex().ToString() == "i16");
	REQUIRE(lexer.Lex().ToString() == "i32");
	REQUIRE(lexer.Lex().ToString() == "id(i32a)");
	REQUIRE(lexer.Lex().ToString() == "id(u7)");
	REQUIRE(lexer.Lex().ToString() == "id(u88)");
	REQUIRE(lexer.Lex().ToString() == "bool");
	REQUIRE(lexer.Lex().ToString() == "nil");
	REQUIRE(lexer.Lex().ToString() == "eof");
}